input AcceptContactRequestInput {
  peerID: String!
  userID: String!
  clientMutationId: String
}

type AcceptContactRequestPayload {
  viewer: Viewer!
  contact: Contact
  clientMutationId: String
}

input AddContactInput {
  userID: String!
  publicFeed: String!
  aliasName: String
  sendInvite: Boolean
  clientMutationId: String
}

type AddContactPayload {
  contact: Contact
  viewer: Viewer!
  clientMutationId: String
}

input AddHDWalletAccountInput {
  walletID: String!
  index: Int!
  userID: String
  clientMutationId: String
}

type AddHDWalletAccountPayload {
  address: String!
  viewer: Viewer!
  clientMutationId: String
}

input AddLedgerWalletAccountsInput {
  indexes: [Int]
  name: String!
  userID: String
  clientMutationId: String
}

type AddLedgerWalletAccountsPayload {
  addresses: [String]
  localID: String!
  viewer: Viewer!
  clientMutationId: String
}

type App implements Node {
  """The ID of an object"""
  id: ID!
  mfid: String!
  localID: ID!
  name: String!
  manifest: AppManifestData!
  update: AppUpdateData
  installationState: InstallationState!
  users: [AppUser!]!
}

type AppAuthor {
  id: String
  name: String
}

input AppCreateMutationInput {
  name: String!
  contentsPath: String!
  version: String!
  developerID: String!
  permissionsRequirements: AppPermissionsRequirementsInput!
  clientMutationId: String
}

type AppCreateMutationPayload {
  app: OwnApp!
  viewer: Viewer!
  clientMutationId: String
}

input AppCreateVersionMutationInput {
  appID: String!
  version: String!
  clientMutationId: String
}

type AppCreateVersionMutationPayload {
  app: OwnApp!
  viewer: Viewer!
  clientMutationId: String
}

input AppInstallMutationInput {
  userID: String!
  manifest: AppManifestInput!
  permissionsSettings: AppPermissionsSettingsInput!
  clientMutationId: String
}

type AppInstallMutationPayload {
  app: App
  viewer: Viewer!
  clientMutationId: String
}

type AppManifestData {
  name: String!
  version: String!
  permissions: AppPermissionsRequirements!
  author: AppAuthor!
}

input AppManifestInput {
  id: String!
  name: String!
  version: String!
  contentsHash: String!
  updateHash: String!
  permissions: AppPermissionsRequirementsInput!
  author: ManifestAuthorInput!
}

type AppPermissionDefinitions {
  WEB_REQUEST: [String]
  BLOCKCHAIN_SEND: Boolean
  COMMS_CONTACT: Boolean
  CONTACTS_READ: Boolean
}

input AppPermissionDefinitionsInput {
  BLOCKCHAIN_SEND: Boolean
  COMMS_CONTACT: Boolean
  CONTACTS_READ: Boolean
  WEB_REQUEST: [String]
}

type AppPermissions {
  BLOCKCHAIN_SEND: Boolean
  CONTACTS_READ: Boolean
  WEB_REQUEST: WebRequestGrants!
}

type AppPermissionsRequirements {
  optional: AppPermissionDefinitions!
  required: AppPermissionDefinitions!
}

input AppPermissionsRequirementsInput {
  optional: AppPermissionDefinitionsInput!
  required: AppPermissionDefinitionsInput!
}

type AppPermissionsSettings {
  permissionsChecked: Boolean!
  grants: AppPermissions!
}

input AppPermissionsSettingsInput {
  permissionsChecked: Boolean!
  grants: PermissionGrantsInput!
}

type Apps {
  installed: [App!]!
  own: [OwnApp!]!
  updatesCount: Int!
}

type AppUpdateData {
  manifest: AppManifestData!
  permissionsChanged: Boolean!
}

input AppUpdateMutationInput {
  appID: String!
  userID: String!
  permissionsSettings: AppPermissionsSettingsInput
  clientMutationId: String
}

type AppUpdateMutationPayload {
  app: App
  viewer: Viewer!
  clientMutationId: String
}

type AppUpdatePayload {
  app: App!
  viewer: Viewer!
}

type AppUser {
  """The ID of an object"""
  id: ID!
  localID: ID!
  identity: OwnUserIdentity!
  settings: AppUserSettings!
}

type AppUserSettings {
  permissionsSettings: AppPermissionsSettings!
}

type AppVersionData {
  version: String!
  versionHash: String
  permissions: AppPermissionsRequirements!
}

enum ConnectionState {
  CONNECTED
  DECLINED
  RECEIVED
  SENDING_FEED
  SENT_FEED
  SENDING_BLOCKCHAIN
  SENT_BLOCKCHAIN
}

type Contact implements Node {
  """The ID of an object"""
  id: ID!
  localID: ID!
  peerID: ID!
  publicFeed: String!
  pubKey: String!
  invite: ContactInviteData
  profile: GenericProfile!
  connectionState: ConnectionState!
}

type ContactChangedPayload {
  contact: Contact!
  viewer: Viewer!
}

type ContactInviteData {
  inviteTX: String
  ethNetwork: String
  stake: InviteStake!
}

type Contacts {
  invitesCount(userID: String!): Int!
  userContacts(userID: String!): [Contact!]!
}

input CreateDeveloperIdentityInput {
  profile: UserProfileInput!
  clientMutationId: String
}

type CreateDeveloperIdentityPayload {
  user: OwnDeveloperIdentity
  viewer: Viewer!
  clientMutationId: String
}

input CreateHDWalletInput {
  blockchain: SupportedWallets!
  name: String!
  userID: String
  clientMutationId: String
}

type CreateHDWalletPayload {
  hdWallet: EthHDWallet
  viewer: Viewer!
  clientMutationId: String
}

input CreateUserIdentityInput {
  profile: UserProfileInput!
  private: Boolean
  clientMutationId: String
}

type CreateUserIdentityPayload {
  user: OwnUserIdentity
  viewer: Viewer!
  clientMutationId: String
}

input DeleteContactInput {
  contactID: String!
  clientMutationId: String
}

type DeleteContactPayload {
  viewer: Viewer!
  clientMutationId: String
}

input DeleteWalletInput {
  walletID: String!
  type: String!
  clientMutationId: String
}

type DeleteWalletPayload {
  viewer: Viewer!
  clientMutationId: String
}

type EthHDWallet implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  localID: ID!
  mnemonic: String!
  accounts: [WalletAccount]
}

type EthLedgerWallet implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  localID: ID!
  accounts: [WalletAccount]
}

type EthWallets {
  hd: [EthHDWallet!]!
  ledger: [EthLedgerWallet!]!
}

type GenericProfile {
  name: String
  avatar: String
  ethAddress: String
}

type Identities {
  ownUsers: [OwnUserIdentity!]!
  ownDevelopers: [OwnDeveloperIdentity!]!
}

input ImportHDWalletInput {
  blockchain: SupportedWallets!
  mnemonic: String!
  name: String!
  userID: String
  clientMutationId: String
}

type ImportHDWalletPayload {
  hdWallet: EthHDWallet
  viewer: Viewer!
  clientMutationId: String
}

enum InstallationState {
  READY
  DOWNLOADING
  ERROR
}

type InviteStake {
  amount: String
  state: StakeState!
  reclaimedTX: String
}

input ManifestAuthorInput {
  id: String!
  name: String!
}

type Mutation {
  createApp(input: AppCreateMutationInput!): AppCreateMutationPayload
  createAppVersion(input: AppCreateVersionMutationInput!): AppCreateVersionMutationPayload
  installApp(input: AppInstallMutationInput!): AppInstallMutationPayload
  updateApp(input: AppUpdateMutationInput!): AppUpdateMutationPayload
  setAppPermissionsRequirements(input: SetAppPermissionsRequirementsInput!): SetAppPermissionsRequirementsPayload
  publishAppVersion(input: PublishAppVersionInput!): PublishAppVersionPayload
  updateAppDetails(input: UpdateAppDetailsInput!): UpdateAppDetailsPayload
  acceptContactRequest(input: AcceptContactRequestInput!): AcceptContactRequestPayload
  addContact(input: AddContactInput!): AddContactPayload
  createUserIdentity(input: CreateUserIdentityInput!): CreateUserIdentityPayload
  createDeveloperIdentity(input: CreateDeveloperIdentityInput!): CreateDeveloperIdentityPayload
  deleteContact(input: DeleteContactInput!): DeleteContactPayload
  setDefaultWallet(input: SetDefaultWalletInput!): SetDefaultWalletPayload
  setUserProfileVisibility(input: SetUserProfileVisibilityInput!): SetUserProfileVisibilityPayload
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload
  addHDWalletAccount(input: AddHDWalletAccountInput!): AddHDWalletAccountPayload
  addLedgerWalletAccounts(input: AddLedgerWalletAccountsInput!): AddLedgerWalletAccountsPayload
  createHDWallet(input: CreateHDWalletInput!): CreateHDWalletPayload
  deleteWallet(input: DeleteWalletInput!): DeleteWalletPayload
  importHDWallet(input: ImportHDWalletInput!): ImportHDWalletPayload
  setEthNetwork(input: SetEthNetworkInput!): SetEthNetworkPayload
}

type NamedProfile {
  name: String!
  avatar: String
  ethAddress: String
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type OwnApp implements Node {
  """The ID of an object"""
  id: ID!
  localID: ID!
  mfid: String!
  name: String!
  contentsPath: String!
  updateFeedHash: String!
  currentVersion: String!
  currentVersionData: AppVersionData!
  publishedVersion: String
  versions: [AppVersionData!]!
  developer: AppAuthor!
  users: [AppUser!]!
}

type OwnDeveloperIdentity implements Node {
  """The ID of an object"""
  id: ID!
  localID: ID!
  mfid: ID!
  pubKey: String!
  profile: NamedProfile!
}

type OwnUserIdentity implements Node {
  """The ID of an object"""
  id: ID!
  localID: ID!
  feedHash: String
  mfid: ID!
  apps: [App!]!
  defaultEthAddress: String
  wallets: EthWallets!
  profile: NamedProfile!
  pubKey: String!
  privateProfile: Boolean
}

type Peer {
  publicKey: String!
  publicFeed: String!
  profile: GenericProfile!
}

type Peers {
  peerLookupByFeed(feedHash: String!): Peer
}

input PermissionGrantsInput {
  BLOCKCHAIN_SEND: Boolean
  COMMS_CONTACT: Boolean
  CONTACTS_READ: Boolean
  WEB_REQUEST: WebRequestGrantInput!
}

input PublishAppVersionInput {
  appID: String!
  version: String!
  clientMutationId: String
}

type PublishAppVersionPayload {
  versionHash: String!
  viewer: Viewer!
  clientMutationId: String
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  viewer: Viewer!
  peers: Peers!
}

input SetAppPermissionsRequirementsInput {
  appID: String!
  permissionsRequirements: AppPermissionsRequirementsInput!
  clientMutationId: String
}

type SetAppPermissionsRequirementsPayload {
  viewer: Viewer!
  clientMutationId: String
}

input SetDefaultWalletInput {
  userID: String!
  address: String!
  clientMutationId: String
}

type SetDefaultWalletPayload {
  viewer: Viewer!
  clientMutationId: String
}

input SetEthNetworkInput {
  url: String!
  clientMutationId: String
}

type SetEthNetworkPayload {
  viewer: Viewer!
  clientMutationId: String
}

type Settings {
  ethereumUrl: String!
}

input SetUserProfileVisibilityInput {
  userID: String!
  visibile: Boolean
  clientMutationId: String
}

type SetUserProfileVisibilityPayload {
  viewer: Viewer!
  clientMutationId: String
}

enum StakeState {
  STAKED
  RECLAIMING
  RECLAIMED
  SEIZED
}

type Subscription {
  appUpdateChanged: AppUpdatePayload!
  contactChanged: ContactChangedPayload!
  contactsChanged: ContactChangedPayload!
}

enum SupportedWallets {
  ETHEREUM
}

input UpdateAppDetailsInput {
  appID: String!
  name: String!
  contentsPath: String!
  version: String!
  clientMutationId: String
}

type UpdateAppDetailsPayload {
  viewer: Viewer!
  clientMutationId: String
}

input UpdateProfileInput {
  userID: String!
  profile: UpdateUserProfileInput!
  privateProfile: Boolean
  clientMutationId: String
}

type UpdateProfilePayload {
  viewer: Viewer!
  clientMutationId: String
}

input UpdateUserProfileInput {
  name: String
  avatar: String
  ethAddress: String
}

input UserProfileInput {
  name: String!
  avatar: String
}

type Viewer {
  id: ID!
  apps: Apps!
  contacts: Contacts!
  identities: Identities!
  wallets: Wallets!
  settings: Settings!
}

type WalletAccount {
  address: String!
  balances: WalletBalances!
}

type WalletBalances {
  eth: String!
  mft: String!
}

type Wallets {
  ethWallets(userID: String!): EthWallets!
}

input WebRequestGrantInput {
  granted: [String]
  denied: [String]
}

type WebRequestGrants {
  granted: [String!]!
  denied: [String!]!
}
