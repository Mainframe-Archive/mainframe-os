type App implements Node {
  """The ID of an object"""
  id: ID!
  localID: ID!
  name: String!
  manifest: AppManifestData!
  users: [AppUser]
}

input AppCreateMutationInput {
  name: String!
  contentsPath: String!
  version: String!
  developerID: String!
  permissionsRequirements: AppPermissionsRequirementsInput!
  clientMutationId: String
}

type AppCreateMutationPayload {
  app: OwnApp
  viewer: Viewer!
  clientMutationId: String
}

input AppInstallMutationInput {
  userID: String!
  manifest: AppManifestInput!
  permissionsSettings: AppPermissionsSettingsInput!
  clientMutationId: String
}

type AppInstallMutationPayload {
  app: App
  viewer: Viewer!
  clientMutationId: String
}

type AppManifestData {
  name: String!
  version: String!
  permissions: AppPermissionsRequirements!
}

input AppManifestInput {
  id: String!
  name: String!
  version: String!
  contentsURI: String!
  permissions: AppPermissionsRequirementsInput!
  author: ManifestAuthorInput!
}

type AppPermissionDefinitions {
  WEB_REQUEST: [String]
  BLOCKCHAIN_SEND: Boolean
}

input AppPermissionDefinitionsInput {
  WEB_REQUEST: [String]
  BLOCKCHAIN_SEND: Boolean
  SWARM_UPLOAD: Boolean
  SWARM_DOWNLOAD: Boolean
}

type AppPermissions {
  BLOCKCHAIN_SEND: Boolean
  SWARM_UPLOAD: Boolean
  SWARM_DOWNLOAD: Boolean
  WEB_REQUEST: WebRequestGrants!
}

type AppPermissionsRequirements {
  optional: AppPermissionDefinitions!
  required: AppPermissionDefinitions!
}

input AppPermissionsRequirementsInput {
  optional: AppPermissionDefinitionsInput!
  required: AppPermissionDefinitionsInput!
}

type AppPermissionsSettings {
  permissionsChecked: Boolean!
  grants: AppPermissions!
}

input AppPermissionsSettingsInput {
  permissionsChecked: Boolean!
  grants: PermissionGrantsInput!
}

type AppsQuery {
  installed: [App]
  own: [OwnApp]
}

type AppUser {
  """The ID of an object"""
  id: ID!
  localID: ID!
  identity: OwnUserIdentity!
  settings: AppUserSettings!
}

type AppUserSettings {
  permissionsSettings: AppPermissionsSettings!
}

type AppVersionData {
  version: String!
  permissions: AppPermissionsRequirements!
  publicationState: String!
}

input CreateDeveloperIdentityInput {
  profile: UserProfileInput!
  clientMutationId: String
}

type CreateDeveloperIdentityPayload {
  user: OwnDeveloperIdentity
  viewer: Viewer!
  clientMutationId: String
}

input CreateUserIdentityInput {
  profile: UserProfileInput!
  clientMutationId: String
}

type CreateUserIdentityPayload {
  user: OwnUserIdentity
  viewer: Viewer!
  clientMutationId: String
}

type IdentitiesQuery {
  ownUsers: [OwnUserIdentity]
  ownDevelopers: [OwnDeveloperIdentity]
}

input ManifestAuthorInput {
  id: String!
}

type Mutation {
  createApp(input: AppCreateMutationInput!): AppCreateMutationPayload
  installApp(input: AppInstallMutationInput!): AppInstallMutationPayload
  createUserIdentity(input: CreateUserIdentityInput!): CreateUserIdentityPayload
  createDeveloperIdentity(input: CreateDeveloperIdentityInput!): CreateDeveloperIdentityPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type OwnApp implements Node {
  """The ID of an object"""
  id: ID!
  localID: ID!
  name: String!
  versions: [AppVersionData]
  users: [AppUser]
}

type OwnDeveloperIdentity implements Node {
  """The ID of an object"""
  id: ID!
  localID: ID!
  mfid: ID!
  pubKey: String!
  profile: OwnDeveloperProfile
}

type OwnDeveloperProfile {
  name: String!
}

type OwnUserIdentity implements Node {
  """The ID of an object"""
  id: ID!
  localID: ID!
  mfid: ID!
  profile: OwnUserProfile
  pubKey: String!
}

type OwnUserProfile {
  name: String!
}

input PermissionGrantsInput {
  BLOCKCHAIN_SEND: Boolean
  SWARM_UPLOAD: Boolean
  SWARM_DOWNLOAD: Boolean
  WEB_REQUEST: WebRequestGrantInput!
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  viewer: Viewer!
}

input UserProfileInput {
  name: String!
  avatar: String
}

type Viewer {
  id: ID!
  apps: AppsQuery!
  identities: IdentitiesQuery!
}

input WebRequestGrantInput {
  granted: [String]
  denied: [String]
}

type WebRequestGrants {
  granted: [String]
  denied: [String]
}
